name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      - name: Unit Tests
        run: go test -v ./... -coverprofile=coverage.txt -covermode=atomic

  build_cli:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        goosarch:
          - 'darwin/amd64'
          - 'linux/amd64'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    - name: Get OS and Architecture Info
      run: |
        GOOSARCH=${{matrix.goosarch}}
        GOOS=${GOOSARCH%/*}
        GOARCH=${GOOSARCH#*/}
        BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
        echo "GOOS=$GOOS" >> $GITHUB_ENV
        echo "GOARCH=$GOARCH" >> $GITHUB_ENV

    - name: Build CLI
      run: go build -o "./bin/$BINARY_NAME" ./cmd/cli/main.go 

  build_web:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - uses: acifani/setup-tinygo@v2
      with:
        tinygo-version: '0.30.0'
    - name: Build WASM
      run: GOOS=js GOARCH=wasm tinygo build -o ./web/test.wasm -target wasm -no-debug ./cmd/wasm/main.go

  publish_release:
    runs-on: ubuntu-latest
    needs: [build_cli, build_web]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
    - name: Publish Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ./bin/*
          ./web/*
          ./coverage.txt
        generate_release_notes: true
        name: Release Web ${{ github.ref_name }}
        target_commitish: ${{ github.sha }}